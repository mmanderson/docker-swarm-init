filter {
  if [type] == "docker" {
    grok {
      match => {
        "message" => [
          # EVENTS - PARTIAL MATCH
          "%{DATA} \[container=%{DATA:container}, container_id=%{BASE16NUM:container_id}, image_name=%{DATA:image_name}\]\[%{INT}\]: %{DATA} event='%{WORD:event}'",

          # NGINX
          "%{DATA} \[container=%{DATA:container}, container_id=%{BASE16NUM:container_id}, image_name=%{DATA:image_name}\]\[%{INT}\]: %{IP:client_addr} - - \[%{DATA}\] \"%{WORD:method} %{DATA:request} HTTP/%{NUMBER:http_version}\" %{NUMBER:response_code} %{NUMBER:response_bytes} \"%{DATA}\" \"%{DATA:user_agent}\"",

          # UWSGI
          "%{DATA} \[container=%{DATA:container}, container_id=%{BASE16NUM:container_id}, image_name=%{DATA:image_name}\]\[%{INT}\]: \[pid: %{NUMBER:pid}\|app: %{NUMBER:app}\|req: %{NUMBER:req_num1}/%{NUMBER:req_num2}\] %{IP:client_addr} \(%{WORD:remote_user}?\) \{%{NUMBER:num_vars} vars in %{NUMBER:bytes} bytes\} %{SYSLOG5424SD} %{WORD:method} %{DATA:request} \=\> generated %{NUMBER:generated_bytes} bytes in %{NUMBER:msecs} msecs \(HTTP/%{NUMBER:http_version} %{NUMBER:response_code}\) %{NUMBER:num_headers} headers in %{NUMBER:header_bytes} bytes \(%{NUMBER:num_switches} switches on core %{NUMBER:uwsgi_core}\)",

          # Anything else - Partial Match
          "%{DATA} \[container=%{DATA:container}, container_id=%{BASE16NUM:container_id}, image_name=%{DATA:image_name}\]\[%{INT}\]: %{GREEDYDATA:remaining}"
        ]
      }
    }

    if [event] {
        mutate {
            add_tag => [ "event" ]
        }
    }

    if [pid] {
        mutate {
            convert => ["pid", "integer"]
        }
    }

    if [app] {
        mutate {
            convert => ["app", "integer"]
        }
    }

    if [req_num1] {
        mutate {
            convert => ["req_num1", "integer"]
            convert => ["req_num2", "integer"]
        }
    }

    if [client_addr] {
        geoip {
            source => "client_addr"
        }
    }

    if [num_vars] {
        mutate {
            convert => ["num_vars", "integer"]
        }
    }

    if [bytes] {
        mutate {
            convert => ["bytes", "integer"]
        }
    }

    if [generated_bytes] {
        mutate {
            convert => ["generated_bytes", "integer"]
        }
    }

    if [msecs] {
        mutate {
            convert => ["msecs", "integer"]
        }
    }

    if [response_code] {
        mutate {
            convert => ["response_code", "integer"]
        }
    }

    if [response_bytes] {
        mutate {
            convert => ["response_bytes", "integer"]
        }
    }

    if [num_headers] {
        mutate {
            convert => ["num_headers", "integer"]
        }
    }

    if [header_bytes] {
        mutate {
            convert => ["header_bytes", "integer"]
        }
    }

    if [num_switches] {
        mutate {
            convert => ["num_switches", "integer"]
        }
    }

    if [uwsgi_core] {
        mutate {
            # Only occurs with uwsgi
            add_tag => ["uwsgi"]
            convert => ["uwsgi_core", "integer"]
        }
    }

    if [user_agent] {
        # Only occurs with NGINX
        useragent {
            source => "user_agent"
        }
        mutate {
            add_tag => ["nginx"]
        }
    }

    # If it's one of the fully-parsed types, then we can remove the message field.
    if ("nginx" in [tags]) or ("uwsgi" in [tags]) {
        mutate {
            remove_field => ["message"]
        }
    } else {
        mutate {
            add_tag => ["partial_match"]
        }
    }
  }
}
